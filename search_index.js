var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Module","page":"API Reference","title":"Module","text":"","category":"section"},{"location":"api/#BiosemiDataFormat","page":"API Reference","title":"BiosemiDataFormat","text":"BiosemiDataFormat\n\nJulia package for reading, writing, and processing BioSemi 24-bit EEG data files (BDF format).\n\nThis package provides functionality to:\n\nRead BDF files into Julia data structures\nWrite Julia data structures back to BDF format\nCrop data by time or trigger events\nDownsample data by integer factors\nSelect or reduce the number of channels\nMerge multiple BDF files\nProcess trigger and status channel information\n\nFile Format\n\nBioSemi BDF files store 24-bit EEG data with metadata including channel information, sampling rates, and trigger events. See the BioSemi BDF specification for detailed format information.\n\nQuick Start\n\nusing BiosemiDataFormat\n\n# Read a BDF file\ndat = read_bdf(\"eeg_data.bdf\")\n\n# Select specific channels\ndat_selected = select_channels_bdf(dat, [\"Fp1\", \"Cz\", \"O1\"])\n\n# Crop data to specific time range\ndat_cropped = crop_bdf(dat, \"triggers\", [100, 200])\n\n# Write modified data\nwrite_bdf(dat_cropped, \"processed_data.bdf\")\n\nLicense\n\nThis package is licensed under the MIT License.\n\n\n\n\n\n","category":"module"},{"location":"api/#Data-Structures","page":"API Reference","title":"Data Structures","text":"","category":"section"},{"location":"api/#BiosemiDataFormat.BiosemiHeader","page":"API Reference","title":"BiosemiDataFormat.BiosemiHeader","text":"BiosemiHeader\n\nData structure containing BioSemi BDF file header information.\n\nFields\n\nid1::Vector{UInt8}: File identifier (first byte)\nid2::Vector{UInt8}: File identifier (remaining bytes)\ntext1::String: Subject information\ntext2::String: Recording information\nstart_date::String: Recording start date (DD.MM.YYYY)\nstart_time::String: Recording start time (HH.MM.SS)\nnum_bytes_header::Int: Header size in bytes\ndata_format::String: Data format (typically \"24BIT\")\nnum_data_records::Int: Number of data records\nduration_data_records::Int: Duration of each record in seconds\nnum_channels::Int: Number of channels (including status channel)\nchannel_labels::Vector{String}: Channel names/labels\ntransducer_type::Vector{String}: Transducer type for each channel\nchannel_unit::Vector{String}: Physical units for each channel\nphysical_min::Vector{Int}: Physical minimum values\nphysical_max::Vector{Int}: Physical maximum values\ndigital_min::Vector{Int}: Digital minimum values\ndigital_max::Vector{Int}: Digital maximum values\npre_filter::Vector{String}: Pre-filtering information\nnum_samples::Vector{Int}: Number of samples per record per channel\nreserved::Vector{String}: Reserved header space\nscale_factor::Vector{Float32}: Scale factors for data conversion\nsample_rate::Vector{Int}: Sampling rate for each channel\n\nNotes\n\nThe last channel is always the status/trigger channel\nscale_factor is automatically calculated from physical and digital ranges\nsample_rate is calculated from num_samples and duration_data_records\n\n\n\n\n\n","category":"type"},{"location":"api/#BiosemiDataFormat.BiosemiTriggers","page":"API Reference","title":"BiosemiDataFormat.BiosemiTriggers","text":"BiosemiTriggers\n\nData structure containing trigger and status channel information.\n\nFields\n\nraw::Vector{Int16}: Raw trigger values for each sample\nidx::Vector{Int}: Sample indices where triggers occur\nval::Vector{Int}: Trigger values at trigger events\ncount::OrderedDict{Int,Int}: Count of each trigger value\ntime::Matrix{Float64}: Trigger timing information (value × time)\n\nNotes\n\nraw contains trigger values for every sample (0 for no trigger)\nidx contains sample indices where trigger values change\ntime matrix has columns: triggervalue, timesinceprevioustrigger\n\n\n\n\n\n","category":"type"},{"location":"api/#BiosemiDataFormat.BiosemiData","page":"API Reference","title":"BiosemiDataFormat.BiosemiData","text":"BiosemiData\n\nComplete data structure containing BioSemi BDF file data and metadata.\n\nFields\n\nfilename::String: Source filename\nheader::BiosemiHeader: File header information\ndata::Matrix{Float32}: EEG data matrix (samples × channels)\ntime::StepRangeLen{Float64}: Time vector for each sample\ntriggers::BiosemiTriggers: Trigger event information\nstatus::Vector{Int16}: Status channel values for each sample\n\nNotes\n\ndata matrix excludes the status channel (stored separately in status)\ntime vector starts at 0 and increments by 1/sample_rate\nstatus contains the status channel values (typically 0)\n\n\n\n\n\n","category":"type"},{"location":"api/#File-I/O-Functions","page":"API Reference","title":"File I/O Functions","text":"","category":"section"},{"location":"api/#Reading-BDF-Files","page":"API Reference","title":"Reading BDF Files","text":"","category":"section"},{"location":"api/#BiosemiDataFormat.read_bdf","page":"API Reference","title":"BiosemiDataFormat.read_bdf","text":"read_bdf(filename; header_only=false, channels=[])\n\nRead BioSemi Data Format (BDF) files into Julia data structures.\n\nArguments\n\nfilename::String: Path to the BDF file\nheader_only::Bool=false: If true, only read header information and return BiosemiHeader\nchannels::Vector{<:Union{Int,String}}=[]: Specific channels to read\nEmpty vector (default): read all channels\nVector of integers: channel indices (1-based, excluding status channel)\nVector of strings: channel labels (e.g., [\"Fp1\", \"Cz\"])\nUse -1 to include only the trigger/status channel\nMix of types allowed (e.g., [1, \"Fp1\", -1])\n\nReturns\n\nBiosemiData: Complete data structure with header, data, time, triggers, and status\nBiosemiHeader: If header_only=true\n\nData Structure\n\nThe returned BiosemiData contains:\n\nheader: File metadata and channel information\ndata: EEG data matrix (samples × selected_channels)\ntime: Time vector starting at 0\ntriggers: Trigger event information\nstatus: Status channel values\n\nExamples\n\n# Read entire file\ndat = read_bdf(\"data.bdf\")\n\n# Read only header\nhdr = read_bdf(\"data.bdf\", header_only=true)\n\n# Read specific channels by index\ndat = read_bdf(\"data.bdf\", channels=[1, 3, 5])\n\n# Read specific channels by label\ndat = read_bdf(\"data.bdf\", channels=[\"Fp1\", \"Cz\", \"A1\"])\n\n# Read only trigger channel\ndat = read_bdf(\"data.bdf\", channels=[-1])\n\n# Mix of channel types\ndat = read_bdf(\"data.bdf\", channels=[1, \"Fp1\", -1])\n\nNotes\n\nChannel indices are 1-based\nThe status/trigger channel is always included automatically\nData is automatically scaled using header calibration information\nTrigger information is extracted from the status channel\nFile format follows BioSemi BDF specification\n\nSee also\n\nwrite_bdf: Write data back to BDF format\ncrop_bdf: Reduce data length\nselect_channels_bdf: Select channels after reading\n\n\n\n\n\n","category":"function"},{"location":"api/#Writing-BDF-Files","page":"API Reference","title":"Writing BDF Files","text":"","category":"section"},{"location":"api/#BiosemiDataFormat.write_bdf","page":"API Reference","title":"BiosemiDataFormat.write_bdf","text":"write_bdf(bdf_in, filename=\"\")\n\nWrite BioSemi BDF data structure to a BDF file.\n\nArguments\n\nbdf_in::BiosemiData: Data structure to write\nfilename::String=\"\": Output filename. If empty, uses bdf_in.filename\n\nFile Format\n\nWrites data in BioSemi BDF 24-bit format with:\n\n256-byte header containing metadata\n24-bit data samples for each channel\nStatus channel as the last channel\nProper scaling and calibration information\n\nHeader Information\n\nThe header includes:\n\nFile identification and metadata\nChannel information (labels, units, ranges)\nSampling rate and data record information\nPre-filtering and transducer information\n\nExamples\n\n# Write to specified filename\nwrite_bdf(dat, \"output.bdf\")\n\n# Arguments\n- `bdf_in::BiosemiData`: Data structure to write\n- `filename::String=\"\"`: Output filename (uses original filename if empty)\n\n# Returns\n- `Nothing`: Writes file to disk\n\n# Examples\n\njulia\n\nWrite to a new file\n\nwritebdf(dat, \"processeddata.bdf\")\n\nWrite using original filename\n\ndat.filename = \"mydata.bdf\" writebdf(dat)\n\nWrite processed data\n\ndatcropped = cropbdf(dat, \"triggers\", [100, 200]) writebdf(datcropped, \"cropped_data.bdf\") ```\n\nNotes\n\nCreates a new BDF file in standard BioSemi format\nAutomatically applies scale factors and converts to 24-bit format\nPreserves all header information and metadata\nIf no filename is provided, uses the filename stored in the data structure\nOverwrites existing files without warning\n\nSee also\n\nread_bdf: Read BDF files\ncrop_bdf: Reduce data before writing\nselect_channels_bdf: Select channels before writing\n\n\n\n\n\n","category":"function"},{"location":"api/#Data-Processing-Functions","page":"API Reference","title":"Data Processing Functions","text":"","category":"section"},{"location":"api/#Cropping-and-Slicing","page":"API Reference","title":"Cropping and Slicing","text":"","category":"section"},{"location":"api/#BiosemiDataFormat.crop_bdf","page":"API Reference","title":"BiosemiDataFormat.crop_bdf","text":"crop_bdf(bdf_in, crop_type, val)\n\nReduce the length of BDF data by cropping (non-mutating).\n\nArguments\n\nbdf_in::BiosemiData: Input data structure\ncrop_type::String: Cropping method (\"records\" or \"triggers\")\nval::Vector{Int}: Cropping parameters\n\nReturns\n\nBiosemiData: New cropped data structure\n\nExamples\n\n# Crop and get new structure\ndat_cropped = crop_bdf(dat, \"records\", [10 20])\ndat_cropped = crop_bdf(dat, \"triggers\", [1 2])\n\nNotes\n\nReturns a new data structure (original unchanged)\nCalls crop_bdf! internally\nUseful when you want to preserve the original data\n\nSee also\n\ncrop_bdf!: In-place version\ndownsample_bdf: Reduce sampling rate\n\n\n\n\n\n","category":"function"},{"location":"api/#BiosemiDataFormat.crop_bdf!","page":"API Reference","title":"BiosemiDataFormat.crop_bdf!","text":"crop_bdf!(bdf, crop_type, val)\n\nReduce the length of BDF data by cropping (in-place).\n\nArguments\n\nbdf::BiosemiData: Data structure to modify\ncrop_type::String: Cropping method\n\"records\": Crop by data record numbers\n\"triggers\": Crop between trigger events\nval::Vector{Int}: Cropping parameters\nFor \"records\": startrecord to endrecord (1-based)\nFor \"triggers\": starttrigger to endtrigger\n\nReturns\n\nNothing: Modifies bdf in-place\n\nExamples\n\n# Crop between records 10-20\ncrop_bdf!(dat, \"records\", [10 20])\n\n# Crop between first occurrence of trigger 1 and last of trigger 2\ncrop_bdf!(dat, \"triggers\", [1 2])\n\nNotes\n\nModifies the original data structure\nUpdates header information (numdatarecords)\nRecalculates time vector and trigger information\nRecords are 1-based indexing\nUse crop_bdf for non-mutating version\n\nSee also\n\ncrop_bdf: Non-mutating version\ndownsample_bdf!: Reduce sampling rate\nmerge_bdf: Combine multiple files\n\n\n\n\n\n","category":"function"},{"location":"api/#BiosemiDataFormat.time_range","page":"API Reference","title":"BiosemiDataFormat.time_range","text":"time_range(sample_rate, num_data_records)\n\nGenerate time vector for BDF data.\n\nArguments\n\nsample_rate::Int: Sampling rate in Hz\nnum_data_records::Int: Number of data records\n\nReturns\n\nStepRangeLen{Float64}: Time vector starting at 0\n\nTime Calculation\n\nTime starts at 0 seconds\nIncrements by 1/sample_rate for each sample\nEnds at (numdatarecords - 1/sample_rate) seconds\nTotal duration = numdatarecords seconds\n\nExamples\n\n# 60 seconds of data at 256 Hz\ntime = time_range(256, 60)\n@assert length(time) == 256 * 60\n@assert first(time) == 0.0\n@assert last(time) == 59.99609375  # (60 - 1/256)\n\nNotes\n\nThis is an internal function used by other functions\nTime vector length matches the number of data samples\nUseful for plotting and time-based operations\n\n\n\n\n\n","category":"function"},{"location":"api/#BiosemiDataFormat.trigger_info","page":"API Reference","title":"BiosemiDataFormat.trigger_info","text":"trigger_info(trig_raw, sample_rate)\n\nExtract trigger event information from raw trigger channel data.\n\nArguments\n\ntrig_raw::Vector{Int16}: Raw trigger values for each sample\nsample_rate::Int: Sampling rate in Hz\n\nReturns\n\nBiosemiTriggers: Structured trigger information containing:\nraw: Original trigger values\nidx: Sample indices where triggers occur\nval: Trigger values at trigger events\ncount: Count of each trigger value\ntime: Trigger timing matrix [value, timesinceprevious]\n\nAlgorithm\n\nFinds sample indices where trigger values change (diff ≥ 1)\nExtracts trigger values at those indices\nCalculates time intervals between consecutive triggers\nCounts occurrences of each trigger value\nCreates timing matrix with trigger values and intervals\n\nNotes\n\nThis is an internal function used by read_bdf\nTrigger events are detected when the trigger value increases\nTime intervals are calculated in seconds\nThe first trigger has time interval 0\n\n\n\n\n\n","category":"function"},{"location":"api/#Downsampling","page":"API Reference","title":"Downsampling","text":"","category":"section"},{"location":"api/#BiosemiDataFormat.downsample_bdf","page":"API Reference","title":"BiosemiDataFormat.downsample_bdf","text":"downsample_bdf(bdf_in, dec)\n\nReduce the sampling rate of BDF data by an integer factor (non-mutating).\n\nArguments\n\nbdf_in::BiosemiData: Input data structure\ndec::Int: Downsampling factor (must be power of 2)\n\nReturns\n\nBiosemiData: New downsampled data structure\n\nExamples\n\n# Downsample and get new structure\ndat_ds = downsample_bdf(dat, 2)\ndat_ds = downsample_bdf(dat, 4)\n\nNotes\n\nReturns a new data structure (original unchanged)\nCalls downsample_bdf! internally\nUseful when you want to preserve the original data\n\nSee also\n\ndownsample_bdf!: In-place version\ncrop_bdf: Reduce data length\n\n\n\n\n\n","category":"function"},{"location":"api/#BiosemiDataFormat.downsample_bdf!","page":"API Reference","title":"BiosemiDataFormat.downsample_bdf!","text":"downsample_bdf!(bdf, dec)\n\nReduce the sampling rate of BDF data by an integer factor (in-place).\n\nArguments\n\nbdf::BiosemiData: Data structure to modify\ndec::Int: Downsampling factor (must be power of 2)\n\nReturns\n\nNothing: Modifies bdf in-place\n\nExamples\n\n# Downsample by factor of 2\ndownsample_bdf!(dat, 2)\n\n# Downsample by factor of 4\ndownsample_bdf!(dat, 4)\n\n# Check the new sampling rate\nprintln(\"Original sampling rate: \", dat.header.sample_rate[1], \" Hz\")\n\nNotes\n\nModifies the original data structure\nApplies anti-aliasing filter using DSP.resample\nReduces data length by factor dec\nUpdates header information (samplerate, numsamples)\nRecalculates time vector and trigger information\nDownsampling factor must be a power of 2\n\nSee also\n\ndownsample_bdf: Non-mutating version\ncrop_bdf: Reduce data length\nmerge_bdf: Combine multiple files\n\n\n\n\n\n","category":"function"},{"location":"api/#Merging","page":"API Reference","title":"Merging","text":"","category":"section"},{"location":"api/#BiosemiDataFormat.merge_bdf","page":"API Reference","title":"BiosemiDataFormat.merge_bdf","text":"merge_bdf(bdfs)\n\nMerge multiple BDF data structures into a single file.\n\nArguments\n\nbdfs::Array{BiosemiData}: Array of BDF data structures to merge\n\nReturns\n\nBiosemiData: Merged data structure\n\nRequirements\n\nAll files must have the same number of channels\nAll files must have identical channel labels\nAll files must have the same sampling rate\n\nExamples\n\n# Merge two BDF files\nfile1 = \"session1.bdf\"\nfile2 = \"session2.bdf\"\n\ndat1 = read_bdf(file1)\ndat2 = read_bdf(file2)\n\ndat_merged = merge_bdf([dat1, dat2])\n\n# Merge multiple files\nfiles = [\"session1.bdf\", \"session2.bdf\", \"session3.bdf\"]\ndata_arrays = [read_bdf(f) for f in files]\ndat_merged = merge_bdf(data_arrays)\n\nNotes\n\nFiles are concatenated in the order provided\nHeader information is taken from the first file\nTrigger information is recalculated for the merged data\nTime vector is updated to reflect the total duration\nOriginal files are not modified\n\nSee also\n\nread_bdf: Read individual BDF files\ncrop_bdf: Reduce data length\nselect_channels_bdf: Select specific channels\n\n\n\n\n\n","category":"function"},{"location":"api/#Channel-Management-Functions","page":"API Reference","title":"Channel Management Functions","text":"","category":"section"},{"location":"api/#Channel-Selection","page":"API Reference","title":"Channel Selection","text":"","category":"section"},{"location":"api/#BiosemiDataFormat.select_channels_bdf","page":"API Reference","title":"BiosemiDataFormat.select_channels_bdf","text":"select_channels_bdf(bdf_in, channels)\n\nSelect specific channels from BDF data (non-mutating).\n\nArguments\n\nbdf_in::BiosemiData: Input data structure\nchannels::Union{Vector{<:Union{Int,String}}, Int, String}: Channels to keep\n\nReturns\n\nBiosemiData: New data structure with selected channels\n\nExamples\n\n# Select and get new structure\ndat_selected = select_channels_bdf(dat, [1, 3, 5])\ndat_selected = select_channels_bdf(dat, [\"Fp1\", \"Cz\"])\n\nNotes\n\nReturns a new data structure (original unchanged)\nCalls select_channels_bdf! internally\nUseful when you want to preserve the original data\n\nSee also\n\nselect_channels_bdf!: In-place version\ndelete_channels_bdf: Remove specific channels\n\n\n\n\n\n","category":"function"},{"location":"api/#BiosemiDataFormat.select_channels_bdf!","page":"API Reference","title":"BiosemiDataFormat.select_channels_bdf!","text":"select_channels_bdf!(bdf, channels)\n\nSelect specific channels from BDF data (in-place).\n\nArguments\n\nbdf::BiosemiData: Data structure to modify\nchannels::Vector{<:Union{Int,String}}: Channels to keep\nVector of integers: channel indices (1-based, excluding status channel)\nVector of strings: channel labels (e.g., [\"Fp1\", \"Cz\"])\nMix of types allowed (e.g., [1, \"Fp1\"])\n\nReturns\n\nNothing: Modifies bdf in-place\n\nExamples\n\n# Select channels by index\nselect_channels_bdf!(dat, [1, 3, 5])\n\n# Select channels by label\nselect_channels_bdf!(dat, [\"Fp1\", \"Cz\", \"A1\"])\n\n# Mix of channel types\nselect_channels_bdf!(dat, [1, \"Fp1\"])\n\nNotes\n\nModifies the original data structure\nThe status/trigger channel is always included automatically\nUpdates header information (numchannels, channellabels, etc.)\nChannel indices are 1-based\nUse select_channels_bdf for non-mutating version\n\nSee also\n\nselect_channels_bdf: Non-mutating version\ndelete_channels_bdf!: Remove specific channels\nread_bdf: Read with channel selection\n\n\n\n\n\n","category":"function"},{"location":"api/#Channel-Deletion","page":"API Reference","title":"Channel Deletion","text":"","category":"section"},{"location":"api/#BiosemiDataFormat.delete_channels_bdf","page":"API Reference","title":"BiosemiDataFormat.delete_channels_bdf","text":"delete_channels_bdf(bdf_in, channels)\n\nRemove specific channels from BDF data (non-mutating).\n\nArguments\n\nbdf_in::BiosemiData: Input data structure\nchannels::Union{Vector{<:Union{Int,String}}, Int, String}: Channels to remove\n\nReturns\n\nBiosemiData: New data structure with channels removed\n\nExamples\n\n# Remove channels and get new structure\ndat_reduced = delete_channels_bdf(dat, [2, 4])\ndat_reduced = delete_channels_bdf(dat, [\"Fp2\", \"F8\"])\n\nNotes\n\nReturns a new data structure (original unchanged)\nCalls delete_channels_bdf! internally\nUseful when you want to preserve the original data\n\nSee also\n\ndelete_channels_bdf!: In-place version\nselect_channels_bdf: Keep specific channels\n\n\n\n\n\n","category":"function"},{"location":"api/#BiosemiDataFormat.delete_channels_bdf!","page":"API Reference","title":"BiosemiDataFormat.delete_channels_bdf!","text":"delete_channels_bdf!(bdf, channels)\n\nRemove specific channels from BDF data (in-place).\n\nArguments\n\nbdf::BiosemiData: Data structure to modify\nchannels::Union{Vector{<:Union{Int,String}}, Int, String}: Channels to remove\n\nReturns\n\nNothing: Modifies bdf in-place\n\nExamples\n\n# Remove channels by index\ndelete_channels_bdf!(dat, [2, 4])\n\n# Remove channels by label\ndelete_channels_bdf!(dat, [\"Fp2\", \"F8\"])\n\n# Mix of channel types\ndelete_channels_bdf!(dat, [2, \"Fp2\"])\n\nNotes\n\nModifies the original data structure\nThe status/trigger channel cannot be removed\nUpdates header information (numchannels, channellabels, etc.)\nChannel indices are 1-based\nUse delete_channels_bdf for non-mutating version\n\nSee also\n\ndelete_channels_bdf: Non-mutating version\nselect_channels_bdf!: Keep specific channels\nread_bdf: Read with channel selection\n\n\n\n\n\n","category":"function"},{"location":"api/#Channel-Utilities","page":"API Reference","title":"Channel Utilities","text":"","category":"section"},{"location":"api/#BiosemiDataFormat.channel_index","page":"API Reference","title":"BiosemiDataFormat.channel_index","text":"channel_index(labels, channels)\n\nConvert channel specifications to channel indices.\n\nExamples\n\n# Single channel by label\nidx = channel_index([\"A1\", \"A2\", \"A3\"], \"A2\")  # Returns [2, 3]\n\n# Single channel by index\nidx = channel_index([\"A1\", \"A2\", \"A3\"], 2)     # Returns [2, 3]\n\n# Multiple channels by index\nidx = channel_index([\"A1\", \"A2\", \"A3\"], [1, 3])  # Returns [1, 3, 3]\n\n# Multiple channels by label\nidx = channel_index([\"A1\", \"A2\", \"A3\"], [\"A1\", \"A3\"])  # Returns [1, 3, 3]\n\n# Mixed types\nidx = channel_index([\"A1\", \"A2\", \"A3\"], [1, \"A2\"])  # Returns [1, 2, 3]\n\n# Trigger channel only\nidx = channel_index([\"A1\", \"A2\", \"A3\"], [-1])  # Returns [3, 3]\n\nArguments\n\nlabels::Vector{<:AbstractString}: Available channel labels\nchannels::Union{Vector{<:Union{Int,String}}, Int, String}: Channel specifications\n\nReturns\n\nVector{Int}: Channel indices including the status channel\n\nNotes\n\nThis is an internal function used by other functions\nChannel indices are 1-based\nThe status channel is always included automatically\nReturns indices in the order specified\nUseful for channel selection and deletion operations\n\n\n\n\n\n","category":"function"},{"location":"#BiosemiDataFormat","page":"Home","title":"BiosemiDataFormat","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for reading, writing, and processing BioSemi 24-bit EEG data files (BDF format).","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BioSemi BDF (BioSemi Data Format) files store 24-bit EEG data with metadata including channel information, sampling rates, and trigger events. This package provides comprehensive functionality to work with these files in Julia.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"File I/O: Read and write Biosemi (*.bdf) files\nBasic Data Processing: Crop, downsample, and merge data\nChannel Management: Select, delete, and manipulate channels\nTrigger Analysis: Extract and analyze trigger events\nStatus Channel: Handle BioSemi status channel information","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using BiosemiDataFormat\n\n# Read a BDF file\ndat = read_bdf(\"eeg_data.bdf\")\n\n# Select specific channels\ndat_selected = select_channels_bdf(dat, [\"Fp1\", \"Cz\", \"O1\"])\n\n# Crop data to specific time range\ndat_cropped = crop_bdf(dat, \"triggers\", [100, 500])\n\n# Downsample data\ndat_downsampled = downsample_bdf(dat, 2)\n\n# Write modified data\nwrite_bdf(dat_downsampled, \"processed_data.bdf\")","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"BiosemiDataFormat\")","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"API Reference","category":"page"}]
}
